/* Copyright (C) 2018 Rayling <https://github.com/Rayling35>
 * SPDX-License-Identifier: MIT
 */
#ifndef __FLASH_INTERNAL_H
#define __FLASH_INTERNAL_H


enum flash_type {
	PROGRAM_HALFWORD   = 0x00000001U,
	PROGRAM_WORD       = 0x00000002U,
	PROGRAM_DOUBLEWORD = 0x00000003U,
};

enum flash_page {/*
	PAGE_0_1KB_8000000   = 0x08000000,
	PAGE_1_1KB_8000400   = 0x08000400,
	PAGE_2_1KB_8000800   = 0x08000800,
	PAGE_3_1KB_8000C00   = 0x08000C00,
	PAGE_4_1KB_8001000   = 0x08001000,
	PAGE_5_1KB_8001400   = 0x08001400,
	PAGE_6_1KB_8001800   = 0x08001800,
	PAGE_7_1KB_8001C00   = 0x08001C00,
	PAGE_8_1KB_8002000   = 0x08002000,
	PAGE_9_1KB_8002400   = 0x08002400,
	PAGE_10_1KB_8002800  = 0x08002800,
	PAGE_11_1KB_8002C00  = 0x08002C00,
	PAGE_12_1KB_8003000  = 0x08003000,
	PAGE_13_1KB_8003400  = 0x08003400,
	PAGE_14_1KB_8003800  = 0x08003800,
	PAGE_15_1KB_8003C00  = 0x08003C00,*/
	PAGE_16_1KB_8004000  = 0x08004000,    /* Start @ of user Flash area */
	PAGE_17_1KB_8004400  = 0x08004400,
	PAGE_18_1KB_8004800  = 0x08004800,
	PAGE_19_1KB_8004C00  = 0x08004C00,
	PAGE_20_1KB_8005000  = 0x08005000,
	PAGE_21_1KB_8005400  = 0x08005400,
	PAGE_22_1KB_8005800  = 0x08005800,
	PAGE_23_1KB_8005C00  = 0x08005C00,
	PAGE_24_1KB_8006000  = 0x08006000,
	PAGE_25_1KB_8006400  = 0x08006400,
	PAGE_26_1KB_8006800  = 0x08006800,
	PAGE_27_1KB_8006C00  = 0x08006C00,
	PAGE_28_1KB_8007000  = 0x08007000,
	PAGE_29_1KB_8007400  = 0x08007400,
	PAGE_30_1KB_8007800  = 0x08007800,
	PAGE_31_1KB_8007C00  = 0x08007C00,
	PAGE_32_1KB_8008000  = 0x08008000,
	PAGE_33_1KB_8008400  = 0x08008400,
	PAGE_34_1KB_8008800  = 0x08008800,
	PAGE_35_1KB_8008C00  = 0x08008C00,
	PAGE_36_1KB_8009000  = 0x08009000,
	PAGE_37_1KB_8009400  = 0x08009400,
	PAGE_38_1KB_8009800  = 0x08009800,
	PAGE_39_1KB_8009C00  = 0x08009C00,
	PAGE_40_1KB_800A000  = 0x0800A000,
	PAGE_41_1KB_800A400  = 0x0800A400,
	PAGE_42_1KB_800A800  = 0x0800A800,
	PAGE_43_1KB_800AC00  = 0x0800AC00,
	PAGE_44_1KB_800B000  = 0x0800B000,
	PAGE_45_1KB_800B400  = 0x0800B400,
	PAGE_46_1KB_800B800  = 0x0800B800,
	PAGE_47_1KB_800BC00  = 0x0800BC00,
	PAGE_48_1KB_800C000  = 0x0800C000,
	PAGE_49_1KB_800C400  = 0x0800C400,
	PAGE_50_1KB_800C800  = 0x0800C800,
	PAGE_51_1KB_800CC00  = 0x0800CC00,
	PAGE_52_1KB_800D000  = 0x0800D000,
	PAGE_53_1KB_800D400  = 0x0800D400,
	PAGE_54_1KB_800D800  = 0x0800D800,
	PAGE_55_1KB_800DC00  = 0x0800DC00,
	PAGE_56_1KB_800E000  = 0x0800E000,
	PAGE_57_1KB_800E400  = 0x0800E400,
	PAGE_58_1KB_800E800  = 0x0800E800,
	PAGE_59_1KB_800EC00  = 0x0800EC00,
	PAGE_60_1KB_800F000  = 0x0800F000,
	PAGE_61_1KB_800F400  = 0x0800F400,
	PAGE_62_1KB_800F800  = 0x0800F800,
	PAGE_63_1KB_800FC00  = 0x0800FC00,    /* End @ of user Flash area */
};

int flash_internal_erase(enum flash_page e_page);
int flash_internal_write(enum flash_type e_type, enum flash_page e_page, uint32_t offset, uint64_t data);
uint16_t flash_internal_read_halfword(enum flash_page e_page, uint32_t offset);
uint32_t flash_internal_read_word(enum flash_page e_page, uint32_t offset);
uint64_t flash_internal_read_doubleword(enum flash_page e_page, uint32_t offset);
int flash_data_write(enum flash_page e_page, uint32_t offset, uint8_t *data, uint16_t length);
int flash_data_read(enum flash_page e_page, uint32_t offset, uint8_t *data, uint16_t length);


#endif
